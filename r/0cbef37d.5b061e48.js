(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{123:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return m}));var o=t(1),r=t(9),a=(t(0),t(152)),c=t(153),i={id:"useNode",title:"useNode()",sidebar_label:"useNode()"},s={id:"api/useNode",title:"useNode()",description:'import {API, Badge} from "./API";',source:"@site/docs/api/useNode.md",permalink:"/r/docs/api/useNode",sidebar_label:"useNode()",sidebar:"docs",previous:{title:"useEditor()",permalink:"/r/docs/api/useEditor"},next:{title:"NodeHelpers",permalink:"/r/docs/api/helpers"}},l=[{value:"Reference",id:"reference",children:[{value:"Parameters",id:"parameters",children:[]},{value:"Returns",id:"returns",children:[]}]},{value:"Examples",id:"examples",children:[{value:"Collecting state information",id:"collecting-state-information",children:[]},{value:"Connectors",id:"connectors",children:[]},{value:"Usage within child components",id:"usage-within-child-components",children:[]},{value:"Manipulating state",id:"manipulating-state",children:[]}]},{value:"Legacy API",id:"legacy-api",children:[{value:"Parameters",id:"parameters-1",children:[]},{value:"Injected Props",id:"injected-props",children:[]},{value:"Example",id:"example",children:[]}]}],d={rightToc:l},p="wrapper";function m(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)(p,Object(o.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)(c.b,{type:"hook",mdxType:"Badge"}),Object(a.b)("p",null,"A Hook that provides methods and state information related to the corresponding ",Object(a.b)("inlineCode",{parentName:"p"},"Node")," that manages the current component. "),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"const { connectors, setProp, ...collected } = useNode(collector);\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Note: This hook can only be used within a User Component. ")),Object(a.b)("h2",{id:"reference"},"Reference"),Object(a.b)("h3",{id:"parameters"},"Parameters"),Object(a.b)(c.a,{items:[["collector","(node: Node) => Collected","A function that collects relevant state information from the corresponding Node. The component will re-render when the values returned by this function changes."]],mdxType:"API"}),Object(a.b)("h3",{id:"returns"},"Returns"),Object(a.b)(c.a,{items:[[null,"Object",[["id","NodeId","The corresponding Node's id"],["related","boolean","Identifies if the component is being used as related component"],["inNodeContext","boolean","This is useful if you are designing a User Component that you also wish to be used as an ordinary React Component; this property helps to differentiate whether the component is being used as a User Component or not"],["connectors","Object",[["connect","(dom: HTMLElement) => HTMLElement","Specifies the DOM that represents the User Component"],["drag","(dom: HTMLElement) => HTMLElement","Specifies the DOM that should be draggable"]]],["setProp","(props: Object) => void","Manipulate the current component's props"],["...collected","Collected","The collected values returned from the collector"]]]],mdxType:"API"}),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Note: ",Object(a.b)("inlineCode",{parentName:"p"},"connectors")," have ",Object(a.b)("strong",{parentName:"p"},"no")," effect when used inside ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"../concepts/user-components#related-components"}),"Related Components"))),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)("h3",{id:"collecting-state-information"},"Collecting state information"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'import cx from "classnames";\nimport {useNode} from "@craftjs/core";\n\nconst Example = () => {\n  const { isHovered, amIBeingDragged } = useNode((node) => ({\n    isHovered: node.events.hovered,\n    amIBeingDragged: node.events.drag,\n\n  }));\n\n  return (\n    <div className={cx({\n      "hovering" : isHovered,\n      "dragged" : amIBeingDragged\n    })}>\n      Yo\n    </div>\n  )\n}\n')),Object(a.b)("h3",{id:"connectors"},"Connectors"),Object(a.b)("p",null,"Connectors must receive a HTML element which can be obtained via an element's ",Object(a.b)("inlineCode",{parentName:"p"},"ref"),"."),Object(a.b)("p",null,"Typically, you would want to chain the ",Object(a.b)("inlineCode",{parentName:"p"},"connect")," and ",Object(a.b)("inlineCode",{parentName:"p"},"drag")," connectors to the root element of your component. This way, users would be able to drag anywhere within the DOM to move the component."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const Example = () => {\n  const { connectors: {connect, drag} } = useNode();\n\n  return (\n    <div ref={ref => connect(drag(ref))}>\n      <div>Hi world</div>\n    </div>\n  )\n}\n")),Object(a.b)("p",null,"Alternatively, you could place the ",Object(a.b)("inlineCode",{parentName:"p"},"drag")," connector in a child element too."),Object(a.b)("p",null,"In the following example, we specified it on the ",Object(a.b)("inlineCode",{parentName:"p"},"a")," element. Now, users will need to drag the ",Object(a.b)("inlineCode",{parentName:"p"},"a")," element if they wish to move the component."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const Example = () => {\n  const { connectors: {connect, drag} } = useNode();\n\n  return (\n    <div ref={connect}>\n      <div>Hi world</div>\n      <a ref={drag}>Drag me to move this component</a>\n    </div>\n  )\n}\n")),Object(a.b)("p",null,"You could place the connectors on a React Component as well. However, the component must expose/forward its DOM in its ",Object(a.b)("inlineCode",{parentName:"p"},"ref")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const CustomDragHandler = React.forwardRef((props, ref) => {\n  return(\n    <a ref={ref}>Drag me to move this component</a>\n  )\n});\n\nconst Example = () => {\n  const { connectors: {connect, drag} } = useNode();\n\n  return (\n    <div ref={connect}>\n      <div>Hi world</div>\n      <CustomDragHandler ref={drag}>Drag me to move this component</CustomDragHandler>\n    </div>\n  )\n}\n")),Object(a.b)("h3",{id:"usage-within-child-components"},"Usage within child components"),Object(a.b)("p",null,"Since User Components are contextually bounded by the ",Object(a.b)("inlineCode",{parentName:"p"},"Node")," that they are being managed by, thus ",Object(a.b)("inlineCode",{parentName:"p"},"useNode")," can be used anywhere ",Object(a.b)("strong",{parentName:"p"},"within")," the component tree."),Object(a.b)("p",null,"In the previous example, we didn't actually need to forward refs from ",Object(a.b)("inlineCode",{parentName:"p"},"CustomDragHandler")," since it's bounded by the same ",Object(a.b)("inlineCode",{parentName:"p"},"Node")," as its parent. Instead, we can just use the connectors from ",Object(a.b)("inlineCode",{parentName:"p"},"useNode")," directly."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const CustomDragHandler = () => {\n  const {drag} = useNode();\n  return(\n    <a ref={drag}>Drag me to move this component</a>\n  )\n};\n\nconst Example = () => {\n  const { connectors: {connect} } = useNode();\n\n  return (\n    <div ref={connect}>\n      <div>Hi world</div>\n      <CustomDragHandler />\n    </div>\n  )\n}\n")),Object(a.b)("h3",{id:"manipulating-state"},"Manipulating state"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'const Example = ({someProp}) => {\n  const { connectors: {connect, drag} } = useNode();\n\n  return (\n    <div ref={connect}>\n      <div>Hi world</div>\n      <a ref={drag}>Drag me to move this component</a>\n      <input type="text" value={someProp} onChange={e => {\n        setProp(props => {\n          props.someProp = e.target.value;\n        });\n      }} />\n    </div>\n  )\n}\n')),Object(a.b)("h2",{id:"legacy-api"},"Legacy API"),Object(a.b)("p",null,"For Class Components, use ",Object(a.b)("inlineCode",{parentName:"p"},"connectNode")," instead."),Object(a.b)(c.b,{type:"hoc",title:!1,mdxType:"Badge"}),Object(a.b)("h3",{id:"parameters-1"},"Parameters"),Object(a.b)(c.a,{items:[["collector","(node: Node) => Collected","A function that collects relevant state information from the corresponding Node. The component will re-render when the values returned by this function changes."]],mdxType:"API"}),Object(a.b)("h3",{id:"injected-props"},"Injected Props"),Object(a.b)(c.a,{items:[["...useNode(collector)","Object","Identical return values as the useNode() hook above"]],mdxType:"API"}),Object(a.b)("h3",{id:"example"},"Example"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'\nimport {connectNode} from "@craftjs/core";\nclass ButtonInner extends React.Component {\n  render() {\n    const { connectors: {connect, drag}, isHovered, ...compProps } = this.props;\n    const { text, color  } = compProps;\n\n    return (\n      <button ref={ ref => connect(drag(ref))} style={{margin: "5px", backgroundColor: color}} >\n        {text}\n        {\n          isHovered ? "I\'m being hovered" : null\n        }\n      </button>\n    );\n  }\n};\n\nexport const Button = connectNode((node) => ({\n  isHovered: node.events.hovered\n}))(ButtonInner);\n\n')))}m.isMDXComponent=!0},152:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return h}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),d=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i({},n,{},e)),t},p=function(e){var n=d(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=Object(o.forwardRef)((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=o,b=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return t?r.a.createElement(b,i({ref:n},l,{components:t})):r.a.createElement(b,i({ref:n},l))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=b;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},153:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return i}));var o=t(0),r=t.n(o),a=function(e){var n=e.item,t=n[0],o=n.length>1&&"string"==typeof n[1]&&n[1],a=3==n.length?"string"==typeof n[2]&&n[2]:4==n.length&&"string"==typeof n[3]&&n[3],i=n.length>1&&Array.isArray(n[n.length-1])&&n[n.length-1];return r.a.createElement("li",{className:"api-item"},r.a.createElement("div",null,t&&r.a.createElement("code",{className:"api-title"},t),o&&r.a.createElement("strong",{className:"api-type"},o)),a&&r.a.createElement("div",{className:"api-description",dangerouslySetInnerHTML:{__html:a}}),i&&r.a.createElement(c,{items:i}))},c=function(e){var n=e.items;return r.a.createElement("ul",null,n&&n.map((function(e,n){return r.a.createElement(a,{item:e,key:n})})))},i=function(e){var n,t=e.type,o=e.title,a=void 0===o||o,c=e.noMargin,i=void 0===c||c;switch(t){case"hoc":n="Higher-Order Component";break;default:n=t[0].toUpperCase()+t.substring(1)}return r.a.createElement("div",{className:"badge-wrapper"},r.a.createElement("span",{className:"badge badge-"+t+" "+(a?"badge-title":"")+" "+(i?"badge-no-margin":"")},n))}}}]);